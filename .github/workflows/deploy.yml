name: Deploy to Production

on:
  push:
    branches: [ main, master ]  # Ejecutar en push a main o master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      # Tests omitidos porque no hay pruebas configuradas
      # - name: Run tests
      #   run: npm test

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Asegurarse de que las herramientas necesarias están disponibles
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # Cargar NVM si está instalado
            
            # Navegar al directorio de la aplicación
            cd /home/${{ secrets.SSH_USERNAME }}/api_project/mongo_clients
            
            # Verificar si el proceso existe en PM2 antes de intentar detenerlo
            if pm2 list | grep -q "mongo_users"; then
              echo "Deteniendo proceso existente..."
              pm2 stop mongo_users || true
              pm2 delete mongo_users || true
            else
              echo "No existe proceso mongo_users en PM2, continuando..."
            fi
            
            # Actualiza los archivos de configuración
            echo "MONGO_URI=${{ secrets.MONGO_URI }}" > .env
            echo "PORT=${{ secrets.PORT }}" >> .env
            
            # Obtén los últimos cambios
            git fetch origin main
            git reset --hard origin/main
            
            # Instala dependencias y tipos adicionales
            npm ci
            npm install --save-dev @types/cors
            
            # Crear archivo ecosystem.config.js
            echo "Creando archivo ecosystem.config.js..."
            
            # Modificar el archivo tsconfig.json para resolver los problemas de tipos
            cat << EOF > tsconfig.json
            {
              "compilerOptions": {
                "target": "ES2020",
                "module": "commonjs",
                "lib": ["es6", "dom"],
                "allowJs": true,
                "skipLibCheck": true,
                "esModuleInterop": true,
                "allowSyntheticDefaultImports": true,
                "strict": false,
                "forceConsistentCasingInFileNames": false,
                "noFallthroughCasesInSwitch": false,
                "moduleResolution": "node",
                "resolveJsonModule": true,
                "isolatedModules": false,
                "noImplicitAny": false,
                "outDir": "./dist",
                "noEmit": false
              },
              "include": ["src/**/*"],
              "exclude": ["node_modules"]
            }
            EOF
            
            # Verifica si existe src/app.ts
            if [ -f "./src/app.ts" ]; then
              # Usar ts-node directamente sin compilación
              cat << EOF > ecosystem.config.js
            module.exports = {
              apps: [{
                name: "mongo_users",
                script: "./src/app.ts", 
                exec_mode: "fork",
                interpreter: "./node_modules/.bin/ts-node",
                env: {
                  NODE_ENV: "production",
                  PORT: ${{ secrets.PORT }},
                  MONGO_URI: "${{ secrets.MONGO_URI }}"
                }
              }]
            };
            EOF
            else
              # Buscar el archivo principal
              MAIN_FILE=$(find ./src -name "*.ts" | head -1)
              if [ -z "$MAIN_FILE" ]; then
                echo "No se encontró ningún archivo TypeScript en src/"
                exit 1
              fi
              echo "Usando $MAIN_FILE como archivo principal"
              cat << EOF > ecosystem.config.js
            module.exports = {
              apps: [{
                name: "mongo_users",
                script: "$MAIN_FILE", 
                exec_mode: "fork",
                interpreter: "./node_modules/.bin/ts-node",
                env: {
                  NODE_ENV: "production",
                  PORT: ${{ secrets.PORT }},
                  MONGO_URI: "${{ secrets.MONGO_URI }}"
                }
              }]
            };
            EOF
            fi
            
            # Inicia la aplicación con PM2
            echo "Iniciando aplicación con PM2..."
            pm2 start ecosystem.config.js
            
            # Muestra estado de la aplicación
            pm2 status
            
            # Guardar configuración de PM2
            pm2 save