name: Deploy to Production

on:
  push:
    branches: [ main, master ]  # Ejecutar en push a main o master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      # Tests omitidos porque no hay pruebas configuradas
      # - name: Run tests
      #   run: npm test

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Asegurarse de que las herramientas necesarias están disponibles
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # Cargar NVM si está instalado
            
            # Preparar entorno
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            APP_DIR="/home/${{ secrets.SSH_USERNAME }}/api_project/mongo_clients"
            BACKUP_DIR="/home/${{ secrets.SSH_USERNAME }}/backups/mongo_clients_$TIMESTAMP"
            
            # Crear un respaldo de la versión actual (opcional)
            mkdir -p $BACKUP_DIR
            cp -r $APP_DIR/.env $APP_DIR/ecosystem.config.js $BACKUP_DIR/ 2>/dev/null || true
            
            # Navegar al directorio de la aplicación
            cd $APP_DIR
            
            # Detener la aplicación completamente
            if command -v pm2 &> /dev/null; then
              pm2 stop mongo_users || true
              pm2 delete mongo_users || true
            else
              echo "PM2 no está instalado, instalándolo..."
              npm install -g pm2
            fi
            
            # Limpiar la instalación actual
            git fetch origin main
            git reset --hard origin/main
            
            # Limpiar completamente node_modules y dist
            rm -rf node_modules dist
            
            # Actualiza los archivos de configuración
            echo "MONGO_URI=${{ secrets.MONGO_URI }}" > .env
            echo "PORT=${{ secrets.PORT }}" >> .env
            
            # Actualiza ecosystem.config.js con los valores de secrets
            cat > ecosystem.config.js << 'EOL'
            module.exports = {
              apps: [{
                name: "mongo_users",
                script: "./dist/app.js",
                interpreter: "ts-node",
                env: {
                  NODE_ENV: "production",
                  PORT: ${{ secrets.PORT }},
                  MONGO_URI: "${{ secrets.MONGO_URI }}"
                }
              }]
            };
            EOL
            
            # Reinstalar todas las dependencias y reconstruir
            npm ci
            npm run build
            
            # Comprobar que el build se haya realizado correctamente
            if [ ! -d "./dist" ]; then
              echo "ERROR: No se ha creado el directorio 'dist'. El build ha fallado."
              exit 1
            fi
            
            # Iniciar la aplicación con PM2
            pm2 start ecosystem.config.js
            
            # Verificar que la aplicación se haya iniciado correctamente
            pm2 status
            
            # Guardar la configuración de PM2 para que persista después de reinicios
            pm2 save
            
            echo "Despliegue completado con éxito"